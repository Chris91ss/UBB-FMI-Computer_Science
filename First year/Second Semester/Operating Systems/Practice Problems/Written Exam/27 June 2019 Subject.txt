1. Write a UNIX command that displays all the lines in the a.txt file that contain at least one binary number that is a multiple of 4 with 5 or more digits (ex: 010100)

Answer:

grep -E '\b[01]{3,}00\b' a.txt


2. Write a UNIX command that reverses all pairs of odd numbers followed by vowels (ex: a23e8i97u3 -> a2e38i9u73)

Answer:

sed -E 's/([13579])([aeiou])/\2\1/g' a.txt


3. Write a UNIX command that displays all the unique soccer scores (ex: 4-0) that appear in the a.txt file. The number of goals can have a maximum of two digits

Answer:

grep -oE '[0-9]{1,2}-[0-9]{1,2}' a.txt | sort | uniq


4. Display the number of processes of each active user in the system

Answer:

ps -eo user= | sort | uniq -c


5. Write a UNIX shell script that calculates the average number of .txt files per directory in the current directory and all its subdirectories

Answer:

#!/bin/bash

# Count the total number of .txt files
total_txt_files=$(find . -type f -name "*.txt" | wc -l)

# Count the total number of directories
total_dirs=$(find . -type d | wc -l)

# Calculate the average using integer division
if [ $total_dirs -eq 0 ]; then
  average=0
else
  average=$((total_txt_files / total_dirs))
fi

# Display the result
echo "Total .txt files: $total_txt_files"
echo "Total directories: $total_dirs"
echo "Average .txt files per directory: $average"


6.How many processes will the code below create, excluding the initial parent process?

if(fork() != fork())
{
      fork();
}


Answer: 5


7. Draw the process hierarchy generated by the code below

int p=0;
for(int i=0; i<3; i++)
{
     if(p == 0)
         p = fork();
     else
         wait(0);
}

Answer:

P0
|
└───P1
    |
    └───P2
        |
        └───P3


8.What does the code fragment below print in the console

char *s[3] = {"A", "B", "C"};
for(int i = 0; i < 3; i++)
{
      if(fork() == 0)
      {   
           execl ("/bin/echo", "/bin/echo", s[i], NULL);
      }
}

Answer: A B C


9. What does the "write" system call do when there is space in the PIPE, but not enough for what it asks to write?


Answer: The write system call will block. The call will wait until enough space becomes available in the PIPE to write the entire amount of data and write will return the number of bytes written.


10. What does the code snippet below print if no other process opens the "abc" FIFO? Justify the answer.

int w, n, k=10;
r = open("abc", O_WRONLY);
n = write(r, &k, sizeof(int));
printf("%d\n", n);

Answer:
The open call with O_WRONLY on a FIFO (named pipe) will block until another process opens the FIFO in read-only mode (O_RDONLY).
Because no other process opens the FIFO "abc" in read-only mode, the open call will never return.
As a result, the write call and the printf statement are never reached.
Nothing will be printed


11.What happens to zombie processes whose parent has terminated?

Answer:
The zombie process becomes an orphan.
The orphaned zombie process is adopted by the init process.
The init process, which regularly calls wait() or waitpid(), reaps the orphaned zombie process, cleaning up


12. Consider that function f is executed simultaneously by 10 threads. Add the necessary lines of code to ensure that n will have the value 10 after the threads finish executing.

Answer:

int n = 0;
pthread_mutex_t mutex;

void *f(void *p)
{
      pthread_mutex_lock(&mutex);
      n++;
      pthread_mutex_unlock(&mutex);
      return NULL;
}



13.Plan the execution of the following jobs (given as Name/Duration/Deadline) so that the amount of job delays is minimal: A/22/27, B/2/15, C/4/5

Answer:
Job C:
Deadline: 5
Finishes at time: 4
Delay: 0 (no delay)

Job B:
Deadline: 15
Finishes at time: 6
Delay: 0 (no delay)

Job A:
Deadline: 27
Finishes at time: 28
Delay: 1 (28 - 27)

Total Delay = 0 + 0 + 1 = 1

14. Give an advantage and a disadvantage of set-associative caches compared to direct ones.

Answer: - advantage: Reduced Conflict Misses
- disadvantage: Increased Complexity and Cost
advantage: collisions do not occur as often
disadvantage: the search is slower


15. What is the highest priority category of memory pages from which the NRU replacement policy would choose a victim page

Answer:
Class 0: Unreferenced and unmodified pages (R=0, M=0)


16. What would you add to the program fragment below so that it prints "1 3 3" to the console? Write the lines of code and specify between which lines of the existing code you would add them. Modifications are not allowed to remove the original lines of code from execution.

very hard

int n = 0;
pthread_mutex_t m[3];

void *f(void *p)
{
    int id = int(p);
    pthread_mutex_lock(&m[id]);
    n += id;
    printf("%d ", n);
    pthread_mutex_unlock(&m[(id + 1) % 3]);
    return NULL;
}

int main()
{
    int i;
    pthread_t t[3];
    for(i = 0; i < 3; i++)
    {
        pthread_mutex_init(&m[i], NULL);
    }

    for(i = 0; i < 3; i++)
    {
        pthread_create(&t[i], NULL, f, (void*)i)
    }

    for(i = 0; i < 3; i++)
    {
        pthread_join(t[i], NULL);
    }

    for(i = 0; i < 3; i++)
    {
        pthread_mutex_destroy(&m[i]);
    }

    return 0;
}



17. Given two set-associative caches, with 2 sets of 4 pages and one with 4 sets of 2 pages, which will give better results for the sequence of page requests: 14, 23, 1, 16, 1, 23 , 16, 14. Justify the answer.

Answer: 4 sets of 2 pages, because the search is faster

4 sets of 2 pages:
set 0: [16]    16%4 = 0
set 1: [1]     1%4 = 1
set 2: [14]    14%4 = 2
set 3: [23]    23%4 = 3

2 sets of 4 pages:
set 0: [14, 16]
set 1: [1, 23]


18. How many data blocks can be referenced by the triple-indirection of an i-node, if a block has size B and an address has size A.

Answer: (B/A)^3


19. What happens with a hard link when the file it points to is deleted?


Answer: Nothing happens to the hard link, when the file that a hard link points to is deleted, the hard link remains intact and still provides access to the data. The data itself is not deleted until all hard links to it are removed


20. Give a method to prevent (avoid) the impasse (deadlock), in the conditions in which the concurrent modification of the resources cannot be avoided.


Answer: Locking resources in a predetermined, consistent order
